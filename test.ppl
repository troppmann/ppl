// A normal distribution with a center at mean and and standard deviation of std
// normal :: VFloat -> VFloat -> VFloat
normal mean std = std * Normal + mean

// An uniform distribution with the range [a,b] 
// 'a' does not need to be lower than 'b'
// uniform :: VFloat -> VFloat -> VFloat
uniform a b = (b - a) * Uniform + a

// A dice with 'n' equally random sites.
// Through loop unrolling optimization will most of the function skipped entirely. 
// dice :: VFloat -> VFloat 
dice n = if n <= 1 then 1 else ( if Uniform < (1/n) then n else dice (n-1))

// Creates an n-tuple with a repetition of 'n'-times of the value.
// replicate :: VFloat -> VFloat -> Value 
replicate n value = if n <= 1 then
        value
    else 
        (value, replicate (n-1) value)


repeat value = (value, repeat value)

// An geometric distribution that counts the number of trials till success 
// of a bernoulli trial with the probability 'p' in [0,1] 
geometric p = if (Uniform < p) then 1 else 1 + geometric p

// An binomial distribution that counts the number of 
// successful trial of 'n' bernoulli trials with the probability 'p' in [0,1].
// Use with optimization and be careful the program expands exponential!
binomial p n = if n <= 0 then
        0
    else (
        if Uniform < p then
            1 + binomial p (n-1)
        else
            binomial p (n-1)
    )

exp v = 2.718281828 ** v

poisson tau = innerPoisson tau Uniform 0 (exp (-tau)) (exp (-tau))

innerPoisson tau u x p s = 
    if u > s then 
        innerPoisson tau (Uniform * (1 - s) +s) (x+1) (p*tau/ (x+1)) (s + (p*tau/ (x+1))) 
    else 
        x

logNormal mean std = exp (normal mean std)

bernoulli p = Uniform < p

busProblem = if Uniform < (5/7) then
        (0,poisson 10)
    else 
        (1,poisson 3)


testMLE = if Uniform < (1/3) then
        (0, Uniform * 2 -10, Uniform * 3)
    else 
        (if Uniform < (1/2) then 
            (1, Uniform, Uniform * 20)
        else 
            (2, Uniform * 3 - 10, Uniform)
        )

ill = if Uniform < (1/1000) then
        (True, repeat (Uniform < 0.99))
    else
        (False, repeat (Uniform < 0.05))

ill2 n = if Uniform < (1/1000) then
        (True, binomialD 0.99 n)
    else
        (False, binomialD 0.05 n)

ill3 n = 
    if n < 10 then
    (if (Uniform < 0.5) then 
        (n, ill2 n)
    else 
        ill3 (n+1))
    else 
        0

factorial n = if n <= 1 then
                1
            else
                n * factorial (n-1)

binomialCoefficient n k =
    (factorial n)/((factorial k) * (factorial (n-k)))

binomialPmfFormula p n k = (binomialCoefficient n k) * (p ** k) * ((1 - p) ** (n - k))


binomialD p n = binomialIntern p n n 1

binomialIntern p n k mass = 
    if k <= 0 then 
        0 
    else 
        ( if Uniform < ((binomialPmfFormula p n k )/mass) then 
            k
        else 
            binomialIntern p n (k-1)  (mass - ((binomialPmfFormula p n k)))) 

negativeBinomial p r = 
    if r <= 0 then
        0
    else 
        (if Uniform < p then
                0 + (negativeBinomial p (r-1))
            else
                1 + (negativeBinomial p r)
        )

negativeBinomialD p r = negativeBinomialIntern p r 0 1

negativeBinomialIntern p r k mass= 
    if Uniform < ((negativeBinomialPmfFormula p r k) / mass) then
        k
    else
        negativeBinomialIntern p r (k + 1) (mass - (negativeBinomialPmfFormula p r k))

negativeBinomialPmfFormula p r k = (binomialCoefficient (k + r - 1) k) * (p ** r) * ((1 - p) ** k)

plinko n = if n == 0 then 
        0
    else
        if bernoulli 0.5 then 
            1 + plinko (n-1)
        else
            -1 + plinko (n-1)


gamble value n = if n == 0 then 
        value
    else
        if bernoulli 0.5 then 
            (0.7 * value) + gamble (value * 0.3 * 1.8) (n-1)
        else
            (0.7 * value) + gamble (value * 0.3 * 0.5) (n-1)

//main = if (0.1) ** (Normal) > -0.2 then Uniform else Uniform + 3
main = if Uniform == 0.2 then 1 else Normal