// A normal distribution with a center at mean and and standard deviation of std
// normal :: VFloat -> VFloat -> VFloat
normal mean std = std * Normal + mean

// An uniform distribution with the range [a,b] 
// 'a' does not need to be lower than 'b'
// uniform :: VFloat -> VFloat -> VFloat
uniform a b = (b - a) * Uniform + a

// A dice with 'n' equally random sites.
// Through loop unrolling optimization will most of the function skipped entirely. 
// dice :: VFloat -> VFloat 
dice n = if n <= 1 then 1 else ( if Uniform < (1/n) then n else dice (n-1))

// Creates an n-tuple with a repetition of 'n'-times of the value.
// replicate :: VFloat -> VFloat -> Value 
replicate n value = if n <= 1 then
        value
    else 
        (value, replicate (n-1) value)


repeat value = (value, repeat value)

// An geometric distribution that counts the number of trials till success 
// of a bernoulli trial with the probability 'p' in [0,1] 
geometric p = if (Uniform < p) then 1 else 1 + geometric p

// An binomial distribution that counts the number of 
// successful trial of 'n' bernoulli trials with the probability 'p' in [0,1].
// Use with optimization and be careful the program expands exponential!
binomial p n = if n <= 0 then
        0
    else (
        if Uniform < p then
            1 + binomial p (n-1)
        else
            binomial p (n-1)
    )

exp v = 2.718281828 ** v

poisson tau = innerPoisson tau Uniform 0 (exp (-tau)) (exp (-tau))

innerPoisson tau u x p s = 
    if u > s then 
        innerPoisson tau (Uniform * (1 - s) +s) (x+1) (p*tau/ (x+1)) (s + (p*tau/ (x+1))) 
    else 
        x

logNormal mean std = exp (normal mean std)

bernoulli p = Uniform < p

busProblem = if Uniform < (5/7) then
        (0,poisson 10)
    else 
        (1,poisson 3)


main = (binomial 0.5 10)